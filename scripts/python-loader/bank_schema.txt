CREATE TABLE IF NOT EXISTS Customers (
    customer_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    address TEXT,
    date_of_birth DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS Accounts (
    account_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES Customers(customer_id),
    account_type VARCHAR(20),
    balance DECIMAL(15, 2) DEFAULT 0.00,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS Transactions (
    transaction_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    account_id UUID REFERENCES Accounts(account_id),
    amount DECIMAL(15, 2),
    transaction_type VARCHAR(20),
    transaction_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    description TEXT
);

tables:
  - table_name: "customers"
    file_path: "<path_to_csv_file>"
    file_format: "csv"
    batch_size: 1000
    num_threads: 4  # Specify the number of threads here
    truncate_table: true
    generate_fake_data: true
    num_fake_records: 100000
    columns:
      customer_id:
        faker_method: uuid4  # UUID generation for the primary key
        data_type: uuid
      first_name:
        faker_method: first_name  # Generate random first name
        data_type: str
      last_name:
        faker_method: last_name  # Generate random last name
        data_type: str
      email:
        faker_method: unique.email  # Generate unique email addresses
        data_type: str
      phone_number:
        faker_method: "numerify(text='###-###-####')"  # Generate random phone numbers
        data_type: str
      address:
        faker_method: address  # Generate random address
        data_type: str
      date_of_birth:
        faker_method: date_of_birth  # Generate random date of birth
        data_type: date
      created_at:
        faker_method: date_time  # Use current timestamp
        data_type: datetime
  - table_name: accounts  # Accounts table configuration
    batch_size: 1000
    generate_fake_data: true
    num_fake_records: 5000  # Generate 5000 fake records for the Accounts table
    columns:
      account_id:
        faker_method: uuid4
        data_type: uuid
      customer_id:
        faker_method: uuid4  # For simplicity; in practice, these should match existing customer IDs
        data_type: uuid
      account_type:
        faker_method: random_element(elements=['Checking', 'Savings', 'Credit'])
        data_type: str
      balance:
        faker_method: pydecimal(left_digits=10, right_digits=2, positive=True)
        data_type: float
      created_at:
        faker_method: date_time
        data_type: datetime
  - table_name: transactions  # Transactions table configuration
    batch_size: 1000
    generate_fake_data: true
    num_fake_records: 20000  # Generate 20000 fake records for the Transactions table
    columns:
      transaction_id:
        faker_method: uuid4
        data_type: uuid
      account_id:
        faker_method: uuid4  # For simplicity; in practice, these should match existing account IDs
        data_type: uuid
      amount:
        faker_method: pydecimal(left_digits=10, right_digits=2, positive=True)
        data_type: float
      transaction_type:
        faker_method: random_element(elements=['Deposit', 'Withdrawal', 'Transfer', 'Payment'])
        data_type: str
      transaction_date:
        faker_method: date_time
        data_type: datetime
      description:
        faker_method: sentence(nb_words=6)
        data_type: str

